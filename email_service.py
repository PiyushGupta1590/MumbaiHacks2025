import os
from pathlib import Path
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Attachment, FileContent, FileName, FileType, Disposition
import base64
from typing import List, Optional


class EmailService:
    """Service for sending emails via SendGrid"""
    
    def __init__(self):
        self.api_key = os.getenv("SENDGRID_API_KEY")
        self.from_email = os.getenv("SENDGRID_FROM_EMAIL")
        
        if not self.api_key:
            raise ValueError("SENDGRID_API_KEY not found in environment variables")
        if not self.from_email:
            raise ValueError("SENDGRID_FROM_EMAIL not found in environment variables")
        
        self.client = SendGridAPIClient(self.api_key)
    
    def send_financial_reports(
        self, 
        to_email: str,
        report_files: List[Path],
        subject: str = "Financial Health Report",
        additional_message: Optional[str] = None
    ) -> bool:
        """
        Send financial reports via email with attachments
        
        Args:
            to_email: Recipient email address
            report_files: List of file paths to attach
            subject: Email subject line
            additional_message: Optional additional text for email body
            
        Returns:
            bool: True if email sent successfully, False otherwise
        """
        try:
            # Read markdown files to include summaries in email body
            email_body = self._build_email_body(report_files, additional_message)
            
            # Create email message
            message = Mail(
                from_email=self.from_email,
                to_emails=to_email,
                subject=subject,
                html_content=email_body
            )
            
            # Attach files
            for file_path in report_files:
                if file_path.exists():
                    attachment = self._create_attachment(file_path)
                    if attachment:
                        message.attachment = attachment
                else:
                    print(f"‚ö†Ô∏è Warning: File not found: {file_path}")
            
            # Send email
            response = self.client.send(message)
            
            if response.status_code == 202:
                print(f"‚úÖ Email sent successfully to {to_email}")
                print(f"   Status Code: {response.status_code}")
                return True
            else:
                print(f"‚ö†Ô∏è Unexpected status code: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error sending email: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def _build_email_body(
        self, 
        report_files: List[Path], 
        additional_message: Optional[str]
    ) -> str:
        """Build HTML email body with report summaries"""
        
        html_parts = [
            "<html>",
            "<head>",
            "<style>",
            "body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }",
            ".header { background-color: #4CAF50; color: white; padding: 20px; text-align: center; }",
            ".content { padding: 20px; background-color: #f9f9f9; }",
            ".footer { padding: 20px; text-align: center; font-size: 12px; color: #666; }",
            ".highlight { background-color: #fff3cd; padding: 10px; border-left: 4px solid #ffc107; margin: 10px 0; }",
            "</style>",
            "</head>",
            "<body>",
            "<div class='header'>",
            "<h1>üìä Financial Health Report</h1>",
            "</div>",
            "<div class='content'>",
            "<p>Dear Business Owner,</p>",
            "<p>Please find attached your comprehensive financial health reports generated by our AI-powered analysis system.</p>"
        ]
        
        if additional_message:
            html_parts.append(f"<div class='highlight'><strong>Note:</strong> {additional_message}</div>")
        
        # Add file information
        html_parts.append("<h3>üîç Attached Reports:</h3>")
        html_parts.append("<ul>")
        for file_path in report_files:
            if file_path.exists():
                file_size = file_path.stat().st_size / 1024  # KB
                html_parts.append(
                    f"<li><strong>{file_path.name}</strong> ({file_size:.1f} KB)</li>"
                )
        html_parts.append("</ul>")
        
        html_parts.extend([
            "<p>The reports include:</p>",
            "<ul>",
            "<li>üí∞ Comprehensive cash flow analysis</li>",
            "<li>‚ö†Ô∏è Risk assessment and urgent action items</li>",
            "<li>üìà Strategic recommendations</li>",
            "<li>üìã Overdue accounts requiring attention</li>",
            "</ul>",
            "<p>Please review the attached reports and take necessary actions on the highlighted priorities.</p>",
            "<p>Best regards,<br><strong>Financial Analysis AI Crew</strong></p>",
            "</div>",
            "<div class='footer'>",
            "<p>This is an automated report generated by your AI-powered financial analysis system.</p>",
            "<p>For questions or support, please contact your system administrator.</p>",
            "</div>",
            "</body>",
            "</html>"
        ])
        
        return "".join(html_parts)
    
    def _create_attachment(self, file_path: Path) -> Optional[Attachment]:
        """Create SendGrid attachment from file"""
        try:
            with open(file_path, 'rb') as f:
                file_data = f.read()
            
            encoded_file = base64.b64encode(file_data).decode()
            
            # Determine file type
            file_extension = file_path.suffix.lower()
            file_type_map = {
                '.md': 'text/markdown',
                '.txt': 'text/plain',
                '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                '.pdf': 'application/pdf'
            }
            file_type = file_type_map.get(file_extension, 'application/octet-stream')
            
            attachment = Attachment(
                FileContent(encoded_file),
                FileName(file_path.name),
                FileType(file_type),
                Disposition('attachment')
            )
            
            return attachment
            
        except Exception as e:
            print(f"‚ùå Error creating attachment for {file_path}: {e}")
            return None


def send_reports_via_email(report_files: List[str], owner_email: Optional[str] = None):
    """
    Convenience function to send financial reports
    
    Args:
        report_files: List of file paths (as strings) to send
        owner_email: Recipient email (defaults to OWNER_EMAIL env variable)
    """
    if not owner_email:
        owner_email = os.getenv("OWNER_EMAIL")
    
    if not owner_email:
        print("‚ùå Error: No recipient email specified. Set OWNER_EMAIL in .env file")
        return False
    
    try:
        email_service = EmailService()
        file_paths = [Path(f) for f in report_files]
        
        # Filter only existing files
        existing_files = [f for f in file_paths if f.exists()]
        
        if not existing_files:
            print("‚ùå Error: No valid report files found to send")
            return False
        
        success = email_service.send_financial_reports(
            to_email=owner_email,
            report_files=existing_files,
            subject="üìä Financial Health Report - Urgent Review Required"
        )
        
        return success
        
    except Exception as e:
        print(f"‚ùå Error in email sending process: {e}")
        return False